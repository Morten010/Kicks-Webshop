generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// nextauth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id String @id @default(cuid())

  firstName String?
  lastName  String?
  gender    String?
  email     String? @unique
  password  String?

  role UserRole @default(USER)

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// end of nextAuth

// product related schemas
model Size {
  id        Int     @id @default(autoincrement())
  
  productId Int
  size      Int?
  quantity  Int?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Brand {
  id   Int     @id @default(autoincrement())
  name String?
  desc String? @db.Text
}



model Product {
  id      Int    @id @default(autoincrement())
  name    String
  slug    String
  desc    String @db.Text
  price   Int
  brandId Int
  gender String
  createdAt DateTime @default(now())

  productImage ProductImage[]
  size         Size[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  fileUrl   String
  fileKey   String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// end of product related schemas
